{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","details","toggleDetails","setState","event","this","props","date","Date","start","dateTime","className","summary","toString","location","href","htmlLink","description","onClick","Component","EventList","events","map","id","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","handleItemClicked","suggestion","type","onChange","NumberOfEvents","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mOAGMA,E,4MACJC,MAAQ,CACNC,SAAS,G,EAGXC,cAAgB,WACd,EAAKC,SAAS,CACZF,SAAU,EAAKD,MAAMC,W,4CAIzB,WAAU,IAAD,OACCG,EAAUC,KAAKC,MAAfF,MAEJG,EAAO,IAAIC,KAAKJ,EAAMK,MAAMC,UAGhC,OACE,gCACE,oBAAIC,UAAY,QAAhB,SAA0BP,EAAMQ,UAChC,oBAAID,UAAY,YAAhB,SAA8BJ,EAAKM,aACnC,oBAAIF,UAAY,WAAhB,oBAAiCP,EAAMQ,QAAvC,cAAoDR,EAAMU,YACzDT,KAAKL,MAAMC,QAEV,sBAAKU,UAAY,UAAjB,UACE,8CACA,6BAAI,mBAAGA,UAAY,aAAaI,KAAMX,EAAMY,SAAxC,8CACJ,mBAAGL,UAAY,cAAf,SAA8BP,EAAMa,iBAGvC,KACD,yBAAQN,UAAY,gBAAgBO,QAAS,kBAAM,EAAKhB,iBAAxD,UAA2EG,KAAKL,MAAMC,QAAU,OAAS,OAAzG,qB,GA/BYkB,aAqCLpB,ICpCTqB,E,4JACJ,WACE,IAAQC,EAAWhB,KAAKC,MAAhBe,OACR,OACE,oBAAIV,UAAU,YAAd,SACGU,EAAOC,KAAI,SAAAlB,GAAK,OACf,6BACE,cAAC,EAAD,CAAOA,MAAOA,KADLA,EAAMmB,a,GANHJ,aAeTC,ICjBTI,E,4MACJxB,MAAQ,CACNyB,MAAO,GACPC,YAAY,I,EAGdC,mBAAqB,SAACvB,GACpB,IAAMwB,EAAQxB,EAAMyB,OAAOD,MACrBF,EAAc,EAAKpB,MAAMwB,UAAUC,QAAO,SAACjB,GAC/C,OAAOA,EAASkB,cAAcC,QAAQL,EAAMI,gBAAkB,KAEhE,EAAK7B,SAAS,CAAEsB,MAAOG,EAAOF,iB,EAGhCQ,kBAAoB,SAACC,GACnB,EAAKhC,SAAS,CACZsB,MAAOU,K,4CAIX,WAAU,IAAD,OACP,OACE,sBAAKxB,UAAU,aAAf,UACE,uBACEyB,KAAK,OACLzB,UAAU,OACViB,MAAOvB,KAAKL,MAAMyB,MAClBY,SAAUhC,KAAKsB,qBAEjB,qBAAIhB,UAAU,cAAd,UACGN,KAAKL,MAAM0B,YAAYJ,KAAI,SAACa,GAAD,OAC1B,oBAAqBjB,QAAS,kBAAM,EAAKgB,kBAAkBC,IAA3D,SAAyEA,GAAhEA,MAEX,6BACE,gDADM,iB,GAjCOhB,aA0CVK,IC1CTc,E,4MACJtC,MAAQ,CACNyB,MAAO,I,EAGTE,mBAAqB,SAACvB,GACpB,IAAMwB,EAAQxB,EAAMyB,OAAOD,MAC3B,EAAKzB,SAAS,CAAEsB,MAAOG,K,4CAGzB,WACE,OACE,8BACE,uBACEQ,KAAK,OACLzB,UAAU,SACViB,MAAOvB,KAAKL,MAAMyB,MAClBY,SAAUhC,KAAKsB,2B,GAjBIR,aAwBdmB,ICRAC,MAZf,WAGE,OACE,sBAAK5B,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCDc6B,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BtB,M","file":"static/js/main.23dc7013.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Event extends Component {\r\n  state = {\r\n    details: false\r\n  }\r\n\r\n  toggleDetails = () => {\r\n    this.setState({\r\n      details: !this.state.details\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { event } = this.props;\r\n\r\n    let date = new Date(event.start.dateTime);\r\n\r\n\r\n    return (\r\n      <div>\r\n        <h1 className = 'title'>{ event.summary }</h1>\r\n        <h4 className = 'startTime'>{ date.toString() }</h4>\r\n        <h4 className = 'location'>{ `@${event.summary} | ${event.location}` }</h4>\r\n        {this.state.details ?\r\n         (\r\n          <div className = 'details'>\r\n            <h2>About event:</h2>\r\n            <h4><a className = 'googleLink' href={event.htmlLink}>See details on Google Calendar</a></h4>\r\n            <p className = 'description'>{event.description}</p>\r\n          </div>\r\n         ) :\r\n         null}\r\n        <button className = 'detailsToggle' onClick={() => this.toggleDetails()} >{this.state.details ? 'hide' : 'show'} details</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Event;\r\n","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\n\r\nclass EventList extends Component {\r\n  render() {\r\n    const { events } = this.props;\r\n    return (\r\n      <ul className=\"EventList\">\r\n        {events.map(event =>\r\n          <li key = {event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","import React, { Component } from 'react';\r\n\r\nclass CitySearch extends Component {\r\n  state = {\r\n    query: '',\r\n    suggestions:[]\r\n  }\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    });\r\n    this.setState({ query: value, suggestions, });\r\n  }\r\n\r\n  handleItemClicked = (suggestion) => {\r\n    this.setState({\r\n      query: suggestion\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"CitySearch\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"city\"\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n        <ul className=\"suggestions\">\r\n          {this.state.suggestions.map((suggestion) => (\r\n            <li key={suggestion} onClick={() => this.handleItemClicked(suggestion)}>{suggestion}</li>\r\n          ))}\r\n          <li key='all'>\r\n            <b>See all cities</b>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;\r\n","import React, { Component } from 'react';\r\n\r\nclass NumberOfEvents extends Component {\r\n  state = {\r\n    query: 32\r\n  }\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({ query: value});\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          className=\"number\"\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberOfEvents;\r\n","import React from 'react';\nimport './App.css';\nimport EventList from './EventList.js';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <CitySearch />\n      <NumberOfEvents />\n      <EventList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}